/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['server.js']) {
  _$jscoverage['server.js'] = [];
  _$jscoverage['server.js'][1] = 0;
  _$jscoverage['server.js'][5] = 0;
  _$jscoverage['server.js'][16] = 0;
  _$jscoverage['server.js'][18] = 0;
  _$jscoverage['server.js'][20] = 0;
  _$jscoverage['server.js'][31] = 0;
  _$jscoverage['server.js'][32] = 0;
  _$jscoverage['server.js'][37] = 0;
  _$jscoverage['server.js'][38] = 0;
  _$jscoverage['server.js'][39] = 0;
  _$jscoverage['server.js'][40] = 0;
  _$jscoverage['server.js'][41] = 0;
  _$jscoverage['server.js'][43] = 0;
  _$jscoverage['server.js'][46] = 0;
  _$jscoverage['server.js'][47] = 0;
  _$jscoverage['server.js'][48] = 0;
  _$jscoverage['server.js'][49] = 0;
  _$jscoverage['server.js'][50] = 0;
  _$jscoverage['server.js'][51] = 0;
  _$jscoverage['server.js'][53] = 0;
  _$jscoverage['server.js'][55] = 0;
  _$jscoverage['server.js'][60] = 0;
}
_$jscoverage['server.js'][1]++;
var restify = require("restify"), server;
_$jscoverage['server.js'][5]++;
server = restify.createServer({version: "0.1.0"});
_$jscoverage['server.js'][16]++;
server.use(restify.acceptParser(server.acceptable));
_$jscoverage['server.js'][18]++;
server.use(restify.queryParser());
_$jscoverage['server.js'][20]++;
server.use(restify.throttle({burst: 100, rate: 50, ip: true}));
_$jscoverage['server.js'][31]++;
server.setupRoutes = (function (router, handler) {
  _$jscoverage['server.js'][32]++;
  var hNames, hFunc, f;
  _$jscoverage['server.js'][37]++;
  for (var i = 0; i < router.length; i++) {
    _$jscoverage['server.js'][38]++;
    if (typeof router[i].handler === "string") {
      _$jscoverage['server.js'][39]++;
      f = handler[router[i].handler];
      _$jscoverage['server.js'][40]++;
      if (! f) {
        _$jscoverage['server.js'][41]++;
        throw new Error("Undefined handler " + router[i].handler + " for route " + router[i].path);
      }
      _$jscoverage['server.js'][43]++;
      this.get(router[i].path, f);
    }
    else {
      _$jscoverage['server.js'][46]++;
      hNames = router[i].handler;
      _$jscoverage['server.js'][47]++;
      hFunc = [];
      _$jscoverage['server.js'][48]++;
      for (var j = 0; j < hNames.length; j++) {
        _$jscoverage['server.js'][49]++;
        f = handler[hNames[j]];
        _$jscoverage['server.js'][50]++;
        if (! f) {
          _$jscoverage['server.js'][51]++;
          throw new Error("Undefined handler " + hNames[j] + " for route " + router[i].path);
        }
        _$jscoverage['server.js'][53]++;
        hFunc.push(f);
}
      _$jscoverage['server.js'][55]++;
      this.get(router[i].path, hFunc);
    }
}
});
_$jscoverage['server.js'][60]++;
module.exports = server;
_$jscoverage['server.js'].source = ["var restify = require('restify'),","  server","","// Create the one and only server","server = restify.createServer({","  // For early development, set all API to version 0.1","  // 1.0 will be for first official public release.","  version: '0.1.0'","})","","/*","** Middleware","*/","","// Use the accept header middleware (respond with 406 if not supported content is requested)","server.use(restify.acceptParser(server.acceptable))","// Use the query string parser","server.use(restify.queryParser())","// Throttle the requests","server.use(restify.throttle({","  burst: 100,","  rate: 50,","  ip: true","}))","","/*","** Route setup","*/","","// Define the route setup method","server.setupRoutes = function(router, handler) {","  var hNames,","    hFunc,","    f","","  // Apply routes and handlers to the server","  for (var i = 0; i &lt; router.length; i++) {","    if (typeof router[i].handler === 'string') {","      f = handler[router[i].handler]","      if (!f) {","        throw new Error('Undefined handler ' + router[i].handler + ' for route ' + router[i].path)","      }","      this.get(router[i].path, f)","    } else {","      // Array of handlers","      hNames = router[i].handler","      hFunc = []","      for (var j = 0; j &lt; hNames.length; j++) {","        f = handler[hNames[j]]","        if (!f) {","          throw new Error('Undefined handler ' + hNames[j] + ' for route ' + router[i].path)","        }","        hFunc.push(f)","      }","      this.get(router[i].path, hFunc)","    }","  }","}","","module.exports = server"];
